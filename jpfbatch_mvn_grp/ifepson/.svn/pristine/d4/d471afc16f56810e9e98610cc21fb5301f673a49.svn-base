package com.gt.ifepson.comandos.configuracion;

import com.gt.ifepson.comandos.CampoFiscal;
import com.gt.ifepson.comandos.TipoComando;
import com.gt.ifepson.comandos.ClasificacionComando;
import com.gt.ifepson.comandos.Extension;
import com.gt.ifepson.comandos.TipoDato;

public class ObtenerConfiguracionDeLineasDeCola extends TipoComando {

    public ObtenerConfiguracionDeLineasDeCola() {
    }

    @Override
    public String[] getNames() {
        return new String[]{"ObtenerConfiguracionDeLineasDeCola"};
    }

    @Override
    public String getDescripcion() {
        return "Obtener Configuración de Líneas de Cola";
    }

    @Override
    public int getCodigo() {
        return 0x050B;
    }

    @Override
    public ClasificacionComando getClasificacionComando() {
        return ClasificacionComando.CONFIGURACION;
    }

    @Override
    public int[] getComando() {
        int[] ret = new int[2];
        ret[0] = 0x05;
        ret[1] = 0x0B;
        return ret;
    }
    
    @Override
    public Extension[] getExtensiones() {
        return new Extension[]{};
    }

    @Override
    public String getNotas() {
        return "Obtiene los valores de las líneas de cola almacenadas en la memoria de trabajo de la impresora fiscal.\n"
                + " Si se recibe el campo texto vacío implica que la línea de cola no será impresa.\n"
                + " Si se recibe el caracter espacio ASCII(32) implica que la línea de cola será impresa como una línea en blanco.";
    }

    @Override
    public String getRequerimientos() {
        return "";
    }

    @Override
    public CampoFiscal[] getCamposSalida() {
        return new CampoFiscal[] {
            new CampoFiscal(1, "Texto", TipoDato.RT, -1, false)
        };
    }

    @Override
    public CampoFiscal[] getCamposEntrada() {
        return new CampoFiscal[] {
            new CampoFiscal(1, "Número de línea de cola", TipoDato.N, 3, true)
        };
    }

}
