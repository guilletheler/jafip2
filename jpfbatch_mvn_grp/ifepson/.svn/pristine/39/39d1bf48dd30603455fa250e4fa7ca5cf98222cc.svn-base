package com.gt.ifepson.comandos.tiqueNc;

import com.gt.ifepson.comandos.CampoFiscal;
import com.gt.ifepson.comandos.TipoComando;
import com.gt.ifepson.comandos.ClasificacionComando;
import com.gt.ifepson.comandos.Extension;
import com.gt.ifepson.comandos.TipoDato;

public class PagosTiqueNC extends TipoComando {

    public PagosTiqueNC() {
    }

    @Override
    public String[] getNames() {
        return new String[]{"PagosTiqueNC"};
    }

    @Override
    public String getDescripcion() {
        return "Aplica un pago al tique o tique-nota de crédito en proceso de emisión.";
    }

    @Override
    public String getNotas() {
        return "Los pagos son opcionales en los tiques\n"
                + "La impresión de las líneas de pagos se efectúa en el momento del cierre del tique.\n"
                + "De haber solicitado el bit de la extensión “Incluye pago en arqueo de pagos” es posible que si el\n"
                + "pago realizado supera el tamaño máximo soportado por el acumulador de arqueo de pagos, el pago\n"
                + "emitido no quedará registrado en la tabla de arqueo de pagos.\n"
                + "Los valores aceptados para el campo “Código forma de pago” son:\n"
                + "1 - Carta de credito documentario\n"
                + "2 - Cartas de credito simple\n"
                + "3 - Cheque\n"
                + "4 - Cheques cancelatorios\n"
                + "5 - Credito documentario\n"
                + "6 - Cuenta corriente\n"
                + "7 - Deposito\n"
                + "8 - Efectivo\n"
                + "9 - Endoso de cheque\n"
                + "10 - Factura de credito\n"
                + "11 - Garantias bancarias\n"
                + "12 - Giros\n"
                + "13 - Letras de cambio\n"
                + "14 - Medios de pago de comercio exterior\n"
                + "15 - Orden de pago documentaria\n"
                + "16 - Orden de pago simple\n"
                + "17 - Pago contra reembolso\n"
                + "18 - Remesa documentaria\n"
                + "19 - Remesa simple\n"
                + "20 - Tarjeta de credito\n"
                + "21 - Tarjeta de debito\n"
                + "22 - Ticket\n"
                + "23 - Transferencia bancaria\n"
                + "24 - Transferencia no bancaria\n"
                + "99 - Otros medios de pago";
    }

    @Override
    public String getRequerimientos() {
        return "No superar los máximos permitidos para las operaciones matemáticas.\n"
                + "El total del tique fiscal debe ser superior a cero.\n"
                + "No haber superado la máxima cantidad de pagos del documento.\n"
                + "Para la anulación de un pago, que puede ser parcial o total, el tipo de pago debe haber sido aplicado con anterioridad y el monto a anular debe ser igual al aplicado anteriormente.";
    }

    @Override
    public int getCodigo() {
        return 0x0A05;
    }

    @Override
    public ClasificacionComando getClasificacionComando() {
        return ClasificacionComando.TIQUE;
    }

    @Override
    public int[] getComando() {
        int[] ret = new int[2];
        ret[0] = 0x0A;
        ret[1] = 0x05;
        return ret;
    }

    @Override
    public Extension[] getExtensiones() {
        return new Extension[]{
            new Extension(0b0000000000000001, "Pago",
            "PAGO", 0b0000000000000000,
            "ANULACION_PAGO", 0b0000000000000001),
            new Extension(0b0000000000000010, "Arqueo",
            "INCLUYE_PAGO_ENARQUEO", 0b0000000000000000,
            "NO_INCLUYE_PAGO_ENARQUEO", 0b0000000000000001)
        };
    }

    @Override
    public CampoFiscal[] getCamposEntrada() {
        return new CampoFiscal[]{
            new CampoFiscal(1, "Descripción extra #1", TipoDato.RT, -1, true),
            new CampoFiscal(2, "Descripción extra #2", TipoDato.RT, -1, true),
            new CampoFiscal(3, "Cantidad de cuotas", TipoDato.N_E, 3, true),
            new CampoFiscal(4, "Detalle de otra forma de pago", TipoDato.RT, -1, true),
            new CampoFiscal(5, "Detalle de los cupones", TipoDato.RT, -1, true),
            new CampoFiscal(6, "Código de forma de pago", TipoDato.N_E, 2, false),
            new CampoFiscal(7, "Monto de pago", TipoDato.N_10_2, 12, false)
        };
    }

    @Override
    public CampoFiscal[] getCamposSalida() {
        return new CampoFiscal[]{
            new CampoFiscal(1, "Monto restante por pagar", TipoDato.N_10_2, 12, false),
            new CampoFiscal(1, "Monto de vuelto", TipoDato.N_10_2, 12, false)
        };
    }

}
