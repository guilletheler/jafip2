package com.gt.ifepson.comandos.dnfh;

import com.gt.ifepson.comandos.CampoFiscal;
import com.gt.ifepson.comandos.TipoComando;
import com.gt.ifepson.comandos.ClasificacionComando;
import com.gt.ifepson.comandos.Extension;
import com.gt.ifepson.comandos.TipoDato;

public class InformacionDeOtrosTributosDNFH extends TipoComando {

    public InformacionDeOtrosTributosDNFH() {
    }

    @Override
    public String[] getNames() {
        return new String[]{"InformacionDeOtrosTributosDNFH"};
    }

    @Override
    public String getDescripcion() {
        return "Obtiene información detallada sobre los otros tributos involucrados en el Documento no Fiscal Homologad en curso.";
    }

    @Override
    public int getCodigo() {
        return 0x100F;
    }

    @Override
    public ClasificacionComando getClasificacionComando() {
        return ClasificacionComando.DNFH;
    }

    @Override
    public int[] getComando() {
        int[] ret = new int[2];
        ret[0] = 0x10;
        ret[1] = 0x0F;
        return ret;
    }

    @Override
    public String getNotas() {
        return " Si se especifica sin información discriminada, los campos 6 a 9 se retornarán vacíos.\n"
                + " No se permite el valor cero en el campo de entrada número 1 (Número (#) de otros tributos a reportar).\n"
                + " El valor mínimo del campo de entrada número 1 (Número (#) de otros tributos a reportar) es uno.\n"
                + " El campo #1 es requerido si se solicita información discriminada.\n"
                + " Los documentos Donación, Rebico R/X no soportan otros tributos.";
    }

    @Override
    public String getRequerimientos() {
        return "";
    }

    @Override
    public Extension[] getExtensiones() {
        return new Extension[]{
            new Extension(0b0000000000000001, "INFORMACION_OTROS_ATRIBUTOS",
            "INFORMACION_CON_DISCRIMINACIO_POR_OTROS_ATRIBUTOS", 0b0000000000000001,
            "SIN_INFORMACION_DISCRIMINADA_POR_OTROS_ATRIBUTOS", 0b0000000000000000
            )
        };
    }

    @Override
    public CampoFiscal[] getCamposEntrada() {
        return new CampoFiscal[]{
            new CampoFiscal(1, "Número (#) de otros tributos a reportar", TipoDato.N_E, 2, true)
        };
    }

    @Override
    public CampoFiscal[] getCamposSalida() {
        return new CampoFiscal[]{
            new CampoFiscal(1, "Total de otros atributos", TipoDato.N_E, 12, false),
            new CampoFiscal(2, "Total de otros atributos Cod07 (Percep. Ingreso Brutos)", TipoDato.N_E, 12, false),
            new CampoFiscal(3, "Total de otros atributos Cod06 (Percep. de IVA)", TipoDato.N_E, 12, false),
            new CampoFiscal(4, "Total de otros atributos Cod09 (Otras Percepciones)", TipoDato.N_E, 12, false),
            new CampoFiscal(5, "Cantidad de otros tributos encontrados", TipoDato.N_E, 2, false),
            new CampoFiscal(6, "Descripción de otros tributos #n", TipoDato.N_E, -1, true),
            new CampoFiscal(7, "Monto de otros tributos #n", TipoDato.N_E, 12, true),
            new CampoFiscal(8, "Tasa asociada a otros tributos #n", TipoDato.N_E, 4, true),
            new CampoFiscal(9, "Código asociado a otros tributos #n", TipoDato.N_E, 2, true)
        };
    }

}
