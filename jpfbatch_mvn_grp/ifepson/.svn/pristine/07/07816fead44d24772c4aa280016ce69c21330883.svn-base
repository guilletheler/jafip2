package com.gt.ifepson.comandos.tiqueFact;

import com.gt.ifepson.comandos.CampoFiscal;
import com.gt.ifepson.comandos.TipoComando;
import com.gt.ifepson.comandos.ClasificacionComando;
import com.gt.ifepson.comandos.Extension;
import com.gt.ifepson.comandos.TipoDato;

public class InformacionDeVentasTiqueFactNDABCM extends TipoComando {

    public InformacionDeVentasTiqueFactNDABCM() {
    }

    @Override
    public String[] getNames() {
        return new String[]{"InformacionDeVentasTiqueFactNDABCM"};
    }

    @Override
    public String getDescripcion() {
        return "Obtiene información detallada sobre las ventas realizadas mediante el tique-factura o nota de débito\n"
                + "A/B/C/M en curso.";
    }

    @Override
    public int getCodigo() {
        return 0x0B0D;
    }

    @Override
    public ClasificacionComando getClasificacionComando() {
        return ClasificacionComando.TFND;
    }

    @Override
    public int[] getComando() {
        int[] ret = new int[2];
        ret[0] = 0x0B;
        ret[1] = 0x0D;
        return ret;
    }

    @Override
    public String getNotas() {
        return " La impresora fiscal devolverá 2 campos por cada tasa que haya sido utilizada durante el tique fiscal en el orden indicado por campos 2 al 3.\n"
                + "Si se solicitara sin información discriminada, los campos 2 al 11 se retornarán vacíos.";
    }

    @Override
    public String getRequerimientos() {
        return "No posee requerimientos";
    }

    @Override
    public Extension[] getExtensiones() {
        return new Extension[]{
            new Extension(0b0000000000000001, "Discriminar tasas",
            "CON_INFORMACION_DISCRIMINADA_POR_TASA_DE_IMPUESTOS_INCLUIDA", 0b0000000000000000,
            "SIN_INFORMACION_DISCRIMINADA_POR_TASA_DE_IMPUESTOS", 0b0000000000000001),
            new Extension(0b0000000000001000, "Retorna valores brutos y netos segun tipo",
            "RETORNA_BRUTOS_AM_NETOS_BC", 0b0000000000000000,
            "RETORNA_NETOS_AM_BRUTOS_BC", 0b0000000000001000),};
    }

    @Override
    public CampoFiscal[] getCamposEntrada() {
        return new CampoFiscal[]{};
    }

    @Override
    public CampoFiscal[] getCamposSalida() {
        return new CampoFiscal[]{
            new CampoFiscal(1, "Total bruto", TipoDato.N_10_2, 12, false),
            new CampoFiscal(2, "Total sin otros tributos", TipoDato.N_10_2, 12, false),
            new CampoFiscal(3, "Tasa de IVA #1", TipoDato.N_0_4, 4, true),
            new CampoFiscal(4, "Total vendido x tasa #1", TipoDato.N_10_2, 12, true),
            new CampoFiscal(5, "Tasa de IVA #2", TipoDato.N_0_4, 4, true),
            new CampoFiscal(6, "Total vendido x tasa #2", TipoDato.N_10_2, 12, true),
            new CampoFiscal(7, "Tasa de IVA #3", TipoDato.N_0_4, 4, true),
            new CampoFiscal(8, "Total vendido x tasa #3", TipoDato.N_10_2, 12, true),
            new CampoFiscal(9, "Tasa de IVA #4", TipoDato.N_0_4, 4, true),
            new CampoFiscal(10, "Total vendido x tasa #4", TipoDato.N_10_2, 12, true),
            new CampoFiscal(11, "Tasa de IVA #5", TipoDato.N_0_4, 4, true),
            new CampoFiscal(12, "Total vendido x tasa #5", TipoDato.N_10_2, 12, true),
            new CampoFiscal(13, "Tasa de IVA #6", TipoDato.N_0_4, 4, true),
            new CampoFiscal(14, "Total vendido x tasa #6", TipoDato.N_10_2, 12, true),
            new CampoFiscal(15, "Tasa de IVA #7", TipoDato.N_0_4, 4, true),
            new CampoFiscal(16, "Total vendido x tasa #7", TipoDato.N_10_2, 12, true)
        };
    }

}
