/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gt.jpfbatch.net.server;

import com.gt.jpfbatch.JpfbatchConfigs;
import com.gt.jpfbatch.MainClass;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author guillermot
 */
public class TCPServer implements Runnable {

    ConcurrentLinkedQueue<ClientThread> clientes = new ConcurrentLinkedQueue<ClientThread>();
    static int timeOut = 1000;
    static JpfbatchConfigs jpfbatchConfigs;
    ServerSocket serverSocket = null;

    static TCPServer instance = null;

    ConcurrentStack estados = new ConcurrentStack();

    Timer garbageCollector = new Timer();

    TimerTask garbageCollectorTask = new TimerTask() {

        @Override
        public void run() {
            TCPServer.instance.recolectar();
        }
    };

    public TCPServer() {

    }

    public boolean recolectar() {
        List<ClientThread> ended = new ArrayList<ClientThread>();

        for (ClientThread ct : clientes) {
            if (!ct.isAlive()) {
                ended.add(ct);
            }
        }

        clientes.removeAll(ended);

        return ended.isEmpty();
    }

    public static int getTimeOut() {
        return timeOut;
    }

    public static void setTimeOut(int timeOut) {
        TCPServer.timeOut = timeOut;
    }

    public static JpfbatchConfigs getJpfbatchConfigs() {
        return jpfbatchConfigs;
    }

    public static void setJpfbatchConfigs(JpfbatchConfigs jpfbatchConfigs) {
        TCPServer.jpfbatchConfigs = jpfbatchConfigs;
    }

    List<String> ejecutar(JPFBNetEventArgs evt) throws IOException {
        synchronized (TCPServer.class) {
            //return Main.EjecutarBatchFromString(evt.getBatchString(), evt.getTimeOut(), evt.getPortConfig(), evt.isTestMode());
            throw new RuntimeException("NO IMPLEMENTADO");
        }
    }

    private void internalDetener() {
        estados.add("DETENER");

        try {
            if (serverSocket != null && !serverSocket.isClosed()) {
                serverSocket.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(TCPServer.class.getName()).log(Level.SEVERE, "Error de entrada salida al cerrar el socket", ex);
        }
        serverSocket = null;
    }

    public static void detener() {
        Logger.getLogger(TCPServer.class.getName()).log(Level.INFO, "Solicitud de detenci√≥n recibida");
        if (TCPServer.instance != null) {
            TCPServer.instance.internalDetener();
        }
    }

    public static void stop() {
        detener();
    }

    private boolean internalIsListen() {
        return Objects.equals(estados.peek(), "ESCUCHANDO");
    }

    public static void start() {
        listen();
    }

    public static boolean listen() {

        Logger.getLogger(TCPServer.class.getName()).log(Level.INFO, "Iniciando servidor");

        if (TCPServer.instance == null) {
            Logger.getLogger(TCPServer.class.getName()).log(Level.INFO, "No hay instancia TCPServer, creando nueva");
            TCPServer.instance = new TCPServer();
        }

        if (!TCPServer.instance.internalIsListen()) {

            Logger.getLogger(TCPServer.class.getName()).log(Level.INFO, "Iniciando");

            TCPServer.instance.estados.add("INICIANDO");
            Thread t = new Thread(TCPServer.instance);

            t.start();

            while (Objects.equals(TCPServer.instance.estados.peek(), ("INICIANDO"))) {
                //espero que se inicie
            }

            Logger.getLogger(TCPServer.class.getName()).log(Level.INFO, "Inicio finalizado " + (TCPServer.instance.internalIsListen() ? "correctamente" : "con error"));

            return TCPServer.instance.internalIsListen();
        }

        Logger.getLogger(TCPServer.class.getName()).log(Level.INFO, "Resultado de la orden de inicio, escuchando = " + TCPServer.instance.internalIsListen());

        return false;
    }

    public static boolean isListen() {
        return TCPServer.instance != null && TCPServer.instance.internalIsListen();
    }

    @Override
    public void run() {
        try {
            Integer port = MainClass.getJpfbatchConfigs().getTcpPort();

            if (port == null || port <= 0) {
                port = 6932;
            }

            serverSocket = new ServerSocket(port);
        } catch (java.net.BindException ex) {
            Logger.getLogger(TCPServer.class.getName()).log(Level.WARNING, "Error puerto abierto", ex);
            this.estados.add("ERROR PUERTO ABIERTO");
            return;
        } catch (IOException ex) {
            this.estados.add("ERROR IO");
            Logger.getLogger(TCPServer.class.getName()).log(Level.SEVERE, "Error de entrada salida al intentar escuchar", ex);
            return;
        }

        Socket clientSocket = null;

        this.estados.add("ESCUCHANDO");

        garbageCollector.schedule(garbageCollectorTask, 10000, 10000);

        while (this.estados.peek().equals("ESCUCHANDO")) {

            try {

                try {
                    clientSocket = serverSocket.accept();
                } catch (java.net.SocketException socket_ex) {
                    if (Objects.equals(estados.peek(), "DETENER")) {
                        break;
                    } else {
                        throw socket_ex;
                    }
                }

                if (clientSocket != null && !serverSocket.isClosed()) {

                    ClientThread ct = new ClientThread(clientSocket, "cliente" + clientes.size(), jpfbatchConfigs);

                    clientes.add(ct);

                    ct.addEventListener(new JPFBNetEventListener() {

                        @Override
                        public List<String> onEjecutar(JPFBNetEventArgs evt) {
                            List<String> retVal = null;
                            try {
                                retVal = ejecutar(evt);
                            } catch (IOException ex) {
                                Logger.getLogger(TCPServer.class.getName()).log(Level.SEVERE, "Error de ebtrada salida al ejecutar", ex);
                            }

                            return retVal;
                        }
                    });

                    ct.start();
                }
            } catch (IOException ex) {
                this.estados.add("ERROR ");
                Logger.getLogger(TCPServer.class.getName()).log(Level.SEVERE, "Error de ebtrada salida al intentar escuchar", ex);
            }

        }

        garbageCollector.cancel();

        while (!this.recolectar()) {
            // espera que terminen todas las ejecucuciones
        }

        estados.add("DETENIDO");

        Logger.getLogger(TCPServer.class.getName()).log(Level.INFO, "Servidor detenido");
    }
}
