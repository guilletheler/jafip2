/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gt.jpfbatch;

import com.beust.jcommander.JCommander;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.CodeSource;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.LoggerContext;

/**
 *
 * @author guillermot
 */
public class MainClass {

    static {
        System.setProperty("java.util.logging.manager", "org.apache.logging.log4j.jul.LogManager");
    }

    static final org.apache.logging.log4j.Logger LOG = LogManager.getLogger(MainClass.class);

    static JpfbatchConfigs jpfbatchConfigs;

    public static void main(String[] args) {
        configLog4j();
        Properties properties = getPropertiesConfig();

        List<String> lstArgs = new ArrayList<String>();

        lstArgs.addAll(Arrays.asList(args));

        for (Map.Entry entry : properties.entrySet()) {
            lstArgs.add("-" + entry.getKey().toString());
            lstArgs.add(entry.getValue().toString());
        }

        jpfbatchConfigs = new JpfbatchConfigs();

        JCommander.Builder jcommanderBuilder = JCommander.newBuilder();
        jcommanderBuilder.addObject(jpfbatchConfigs);
        JCommander jcommander = jcommanderBuilder.build();
        jcommander.setCaseSensitiveOptions(false);
        jcommander.parse(lstArgs.toArray(new String[] {}));

    }

    public static String getJarPath() {
        CodeSource codeSource = MainClass.class.getProtectionDomain().getCodeSource();

        String jarDir = "";
        try {
            File jarFile = new File(codeSource.getLocation().toURI().getPath());
            jarDir = jarFile.getParentFile().getPath();
        } catch (URISyntaxException ex) {
            java.util.logging.Logger.getLogger(MainClass.class.getName()).log(java.util.logging.Level.SEVERE, "Error buscando jar path", ex);
        }
        return jarDir;
    }

    private static void configLog4j() {
        configLog4j(null);
    }

    private static void configLog4j(String logFile) {
        LoggerContext context = (LoggerContext) LogManager.getContext(false);
        if (logFile == null) {
            logFile = getJarPath() + "/log4j2.xml";
        }
        Path path = Paths.get(logFile, new String[0]);

        Boolean noExiste = false;

        File log4jConfigFile;

        if (Files.exists(path, new LinkOption[0])) {
            log4jConfigFile = path.toFile();
        } else {
            noExiste = true;
            log4jConfigFile = new File("/home/prog/java_mvn/consultadolar/src/main/resources/log4j2.xml");
        }

        URI uri = null;

        if (log4jConfigFile.exists()) {
            uri = log4jConfigFile.toURI();
        } else {
            try {
                uri = MainClass.class.getClassLoader().getResource("log4j2.xml").toURI();
            } catch (URISyntaxException ex) {
                Logger.getLogger(MainClass.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (uri != null) {
            context.setConfigLocation(uri);
        } else {
            LOG.log(org.apache.logging.log4j.Level.WARN, "el archivo " + logFile + " no existe");
        }
    }

    public static Properties getPropertiesConfig() {

        File paramsFile = new File(MainClass.getJarPath() + "/jpfbatch.properties");

        if (!paramsFile.exists()) {
            paramsFile = new File("/home/prog/java_mvn/fiscal/version_2/jpfbatch_mvn_grp/jpfbatch/src/main/resources/jpfbatch.properties");
        }

        Properties properties = new Properties();

        try {
            properties.load(new FileInputStream(paramsFile));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainClass.class.getName()).log(Level.SEVERE, "Error leyendo configuracion", ex);
        } catch (IOException ex) {
            Logger.getLogger(MainClass.class.getName()).log(Level.SEVERE, "Error leyendo configuracion", ex);
        }
        return properties;
    }

    public static JpfbatchConfigs getJpfbatchConfigs() {
        return jpfbatchConfigs;
    }

}
